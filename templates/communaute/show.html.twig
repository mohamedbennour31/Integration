{% extends 'base.html.twig' %}

{% block title %}Community: {{ communaute.nom }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .message-content {
            max-width: 75%;
            display: inline-block;
        }
        .messages {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        .chat-container {
            height: calc(100vh - 100px);
            overflow-y: auto;
        }
        .poll-card {
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            margin-bottom: 1rem;
        }
        .progress {
            background-color: #e9ecef;
            border-radius: 0.25rem;
        }
        .progress-bar {
            background-color: #007bff;
            color: white;
            text-align: center;
            font-size: 0.875rem;
            line-height: 20px;
            white-space: nowrap;
        }
        .badge-active {
            background-color: #28a745;
            color: white;
        }
        .badge-closed {
            background-color: #6c757d;
            color: white;
        }
        .polls-sidebar {
            position: fixed;
            right: 0;
            top: 0;
            height: 100vh;
            width: 300px;
            background: white;
            box-shadow: -2px 0 5px rgba(0,0,0,0.1);
            transform: translateX(100%);
            transition: transform 0.3s ease;
            z-index: 1000;
            padding: 1rem;
            overflow-y: auto;
        }
        .polls-sidebar.show {
            transform: translateX(0);
        }
        .toggle-polls {
            position: fixed;
            right: 20px;
            bottom: 20px;
            z-index: 1001;
        }
        /* New styling for messages */
        .message {
            margin-bottom: 15px;
            max-width: 75%;
        }
        .message-own {
            margin-right: auto;
            background-color: #f1f1f1;
            color: black;
            border-radius: 15px 15px 15px 0;
            padding: 10px 15px;
        }
        .message-own .text-muted {
            color: rgba(0, 0, 0, 0.6) !important;
        }
        .message-other {
            margin-left: auto;
            background-color: #007bff;
            color: white;
            border-radius: 15px 15px 0 15px;
            padding: 10px 15px;
        }
        .message-other .text-muted {
            color: rgba(255, 255, 255, 0.7) !important;
        }
        .option-input-group {
            display: flex;
            align-items: center;
        }
        .remove-option-btn {
            margin-left: 10px;
            color: #dc3545;
            cursor: pointer;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container-fluid mt-4">
        <div class="row">
            <!-- Community Info Sidebar -->
            <div class="col-md-3">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h3 class="h4 mb-0">{{ communaute.nom }}</h3>
                    </div>
                    <div class="card-body">
                        <div class="mb-4">
                            <h5>Description</h5>
                            <p>{{ communaute.description }}</p>
                        </div>

                        <div class="mb-4">
                            <h5>Details</h5>
                            <ul class="list-unstyled">
                                <li><strong>Created:</strong> {{ communaute.date_creation|date('Y-m-d H:i:s') }}</li>
                                <li><strong>Hackathon:</strong> {{ communaute.id_hackathon.nom_hackathon }}</li>
                            </ul>
                        </div>

                        
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h4 class="h5 mb-0">Available Chats</h4>
                    </div>
                    <div class="list-group list-group-flush">
                        {% for chat in communaute.chats %}
                            <a href="#" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center chat-link" 
                               data-chat-id="{{ chat.id }}"
                               data-chat-name="{{ chat.nom }}"
                               data-chat-type="{{ chat.type }}">
                                {{ chat.nom }}
                                <span class="badge bg-primary rounded-pill">{{ chat.type }}</span>
                            </a>
                        {% endfor %}
                    </div>
                </div>

                <div class="mt-3">
                    <a href="{{ path('app_communaute_index') }}" class="btn btn-secondary w-100">Back to Communities</a>
                </div>
            </div>

            <!-- Chat Area -->
            <div class="col-md-9">
                <div id="chat-container" class="card">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <h4 class="mb-0" id="current-chat-name">Select a chat to start</h4>
                        <button type="button" class="btn btn-light btn-sm" data-bs-toggle="modal" data-bs-target="#createPollModal" id="create-poll-btn" style="display: none;">
                            <i class="fas fa-poll"></i> Create Poll
                        </button>
                    </div>
                    <div class="card-body">
                        <div id="messages-container" style="max-height: 600px; overflow-y: auto;">
                            <p class="text-center text-muted">Select a chat from the list to view messages</p>
                        </div>

                        <form id="message-form" class="mt-3" style="display: none;">
                            <input type="hidden" name="_token" value="{{ csrf_token('message_token') }}">
                            <div class="form-group">
                                <textarea class="form-control" name="contenu" rows="2" placeholder="Type your message..." required></textarea>
                            </div>
                            <div class="form-group mt-2">
                                <select class="form-control" name="type">
                                    <option value="QUESTION">Question</option>
                                    <option value="REPONSE">Response</option>
                                    <option value="SUGGESTION">Suggestion</option>
                                </select>
                            </div>
                            <button type="submit" class="btn btn-primary mt-2">Send Message</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Polls Sidebar -->
    <div class="polls-sidebar" id="polls-sidebar">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="card-title mb-0">Polls</h5>
            <button type="button" class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#createPollModal">
                <i class="fas fa-plus"></i> New Poll
            </button>
        </div>
        <div id="polls-container">
            <!-- Polls will be loaded here dynamically -->
        </div>
    </div>

    <!-- Toggle Polls Button -->
    <button class="btn btn-primary toggle-polls" id="toggle-polls">
        <i class="fas fa-poll"></i>
    </button>

    <!-- Create Poll Modal -->
    <div class="modal fade" id="createPollModal" tabindex="-1" aria-labelledby="createPollModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createPollModalLabel">Create New Poll</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="create-poll-form">
                    <input type="hidden" name="_token" value="{{ csrf_token('poll_token') }}">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="question" class="form-label">Poll Question</label>
                            <input type="text" class="form-control" id="question" name="question" required>
                        </div>
                        <div id="pollOptions" class="mb-3">
                            <div class="mb-2 option-input-group">
                                <div class="flex-grow-1">
                                    <label class="form-label">Option 1</label>
                                    <input type="text" class="form-control" name="options[]" required>
                                </div>
                            </div>
                            <div class="mb-2 option-input-group">
                                <div class="flex-grow-1">
                                    <label class="form-label">Option 2</label>
                                    <input type="text" class="form-control" name="options[]" required>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-secondary btn-sm" onclick="addOption()">
                            <i class="fas fa-plus"></i> Add Option
                        </button>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Create Poll</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        let currentChatId = null;
        let currentUserId = {{ app.user ? app.user.id : 'null' }};

        // Toggle polls sidebar
        document.getElementById('toggle-polls').addEventListener('click', function() {
            document.getElementById('polls-sidebar').classList.toggle('show');
        });

        // Handle chat selection
        document.querySelectorAll('.chat-link').forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                const chatId = this.dataset.chatId;
                const chatName = this.dataset.chatName;
                currentChatId = chatId;
                
                // Update UI
                document.getElementById('current-chat-name').textContent = chatName;
                document.getElementById('message-form').style.display = 'block';
                document.getElementById('create-poll-btn').style.display = 'block';
                
                // Load messages and polls
                loadChatContent(chatId);
            });
        });

        // Load all chat content (messages and polls)
        function loadChatContent(chatId) {
            const container = document.getElementById('messages-container');
            container.innerHTML = '<p class="text-center">Loading messages...</p>';
            
            Promise.all([
                fetch(`/chat/${chatId}/messages`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to load messages');
                        }
                        return response.json();
                    })
                    .catch(error => {
                        console.error('Error loading messages:', error);
                        return { messages: [] };
                    }),
                fetch(`/chat/${chatId}/polls`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to load polls');
                        }
                        return response.json();
                    })
                    .catch(error => {
                        console.error('Error loading polls:', error);
                        return { polls: [] };
                    })
            ])
            .then(([messagesData, pollsData]) => {
                container.innerHTML = '';
                
                console.log('Messages data:', messagesData);
                console.log('Polls data:', pollsData);
                
                // Combine messages and polls into a single array with timestamps
                const allContent = [
                    ...(messagesData.messages || []).map(msg => ({
                        type: 'message',
                        timestamp: new Date(msg.post_time),
                        content: msg
                    })),
                    ...(pollsData.polls || []).map(poll => ({
                        type: 'poll',
                        timestamp: new Date(poll.created_at),
                        content: poll
                    }))
                ];

                // Sort by timestamp
                allContent.sort((a, b) => b.timestamp - a.timestamp);

                if (allContent.length === 0) {
                    container.innerHTML = '<p class="text-center text-muted">No content yet. Be the first to post!</p>';
                    return;
                }

                allContent.forEach(item => {
                    if (item.type === 'message') {
                        container.innerHTML += createMessageHTML(item.content);
                    } else {
                        container.innerHTML += createPollHTML(item.content);
                    }
                });
            })
            .catch(error => {
                console.error('Error loading chat content:', error);
                container.innerHTML = `<p class="text-center text-danger">Error loading content: ${error.message}</p>`;
            });
        }

        // Create message HTML
        function createMessageHTML(message) {
            const isOwnMessage = message.posted_by && currentUserId === message.posted_by.id_user;
            const messageClass = isOwnMessage ? 'message-own' : 'message-other';

            return `
                <div class="message mb-3 ${messageClass}">
                    <div class="d-flex justify-content-between">
                        <strong>${message.posted_by.nom} ${message.posted_by.prenom || ''}</strong>
                        <small class="text-muted">${new Date(message.post_time).toLocaleString()}</small>
                    </div>
                    <p class="mb-1">${message.contenu}</p>
                    <small class="text-muted">Type: ${message.type}</small>
                </div>
            `;
        }

        // Create poll HTML
        function createPollHTML(poll) {
            let optionsHTML = '';
            let totalVotes = 0;
            
            poll.poll_option.forEach(option => {
                totalVotes += option.vote_count || 0;
            });

            poll.poll_option.forEach(option => {
                const voteCount = option.vote_count || 0;
                const percentage = totalVotes > 0 ? (voteCount / totalVotes * 100).toFixed(1) : 0;
                optionsHTML += `
                    <div class="poll-option mb-3">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" 
                                       name="option_id" 
                                       value="${option.id}" 
                                       id="option${option.id}"
                                       required
                                       ${poll.is_closed ? 'disabled' : ''}>
                                <label class="form-check-label" for="option${option.id}">
                                    ${option.text}
                                </label>
                            </div>
                        </div>
                        <div class="progress" style="height: 20px;">
                            <div class="progress-bar" role="progressbar" 
                                 style="width: ${percentage}%;" 
                                 aria-valuenow="${percentage}" 
                                 aria-valuemin="0" 
                                 aria-valuemax="100">
                                ${voteCount} votes (${percentage}%)
                            </div>
                        </div>
                    </div>
                `;
            });

            return `
                <div class="poll-card mb-3">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6 class="mb-0">${poll.question}</h6>
                        <div>
                            <small class="text-muted me-2">${new Date(poll.created_at).toLocaleString()}</small>
                            <span class="badge ${poll.is_closed ? 'badge-closed' : 'badge-active'}">
                                ${poll.is_closed ? 'Closed' : 'Active'}
                            </span>
                        </div>
                    </div>
                    <div class="card-body">
                        <form class="poll-form" onsubmit="return handleVote(event, ${poll.id})">
                            <div class="poll-options">
                                ${optionsHTML}
                            </div>
                            ${!poll.is_closed ? `
                                <div class="d-flex justify-content-between mt-3">
                                    <button type="submit" class="btn btn-primary">Vote</button>
                                    <button type="button" class="btn btn-secondary" onclick="closePoll(${poll.id})">Close Poll</button>
                                </div>
                            ` : '<p class="text-muted mt-2">This poll is closed</p>'}
                        </form>
                    </div>
                </div>
            `;
        }

        // Handle message form submission
        document.getElementById('message-form').addEventListener('submit', function(e) {
            e.preventDefault();
            if (!currentChatId) return;

            const formData = new FormData(this);
            
            // Show sending indicator
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            submitBtn.disabled = true;
            submitBtn.textContent = 'Sending...';

            fetch(`/chat/${currentChatId}/message/new`, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    return response.json().then(data => {
                        throw new Error(data.error || 'Error sending message');
                    });
                }
            })
            .then(data => {
                console.log('Message sent successfully', data);
                this.reset();
                loadChatContent(currentChatId);
            })
            .catch(error => {
                console.error('Error sending message:', error);
                alert('Error sending message: ' + error.message);
            })
            .finally(() => {
                // Reset button
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            });
        });

        // Handle poll creation
        document.getElementById('create-poll-form').addEventListener('submit', function(e) {
            e.preventDefault();
            if (!currentChatId) return;

            const formData = new FormData(this);
            
            // Show sending indicator
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            submitBtn.disabled = true;
            submitBtn.textContent = 'Creating...';

            fetch(`/chat/${currentChatId}/poll/new`, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    return response.json().then(data => {
                        throw new Error(data.error || 'Error creating poll');
                    });
                }
            })
            .then(data => {
                console.log('Poll created successfully', data);
                this.reset();
                loadChatContent(currentChatId);
                
                try {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('createPollModal'));
                    if (modal) modal.hide();
                } catch (e) {
                    console.error('Error hiding modal:', e);
                    document.getElementById('createPollModal').style.display = 'none';
                }
            })
            .catch(error => {
                console.error('Error creating poll:', error);
                alert('Error creating poll: ' + error.message);
            })
            .finally(() => {
                // Reset button
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            });
        });

        // Handle voting
        function handleVote(event, pollId) {
            event.preventDefault();
            const form = event.target;
            const optionId = form.querySelector('input[name="option_id"]:checked')?.value;
            
            if (!optionId) {
                alert('Please select an option before voting.');
                return false;
            }
            
            // Disable all vote buttons temporarily
            const voteButton = form.querySelector('button[type="submit"]');
            if (voteButton) {
                voteButton.disabled = true;
                voteButton.textContent = 'Voting...';
            }

            fetch(`/chat/poll/${pollId}/vote`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': '{{ csrf_token('vote_token') }}'
                },
                body: JSON.stringify({ option_id: optionId })
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    return response.json().then(data => {
                        throw new Error(data.error || 'Error submitting vote');
                    });
                }
            })
            .then(data => {
                console.log('Vote submitted successfully', data);
                loadChatContent(currentChatId);
            })
            .catch(error => {
                console.error('Error submitting vote:', error);
                alert('Error submitting vote: ' + error.message);
            })
            .finally(() => {
                if (voteButton) {
                    voteButton.disabled = false;
                    voteButton.textContent = 'Vote';
                }
            });

            return false;
        }

        // Close poll
        function closePoll(pollId) {
            if (confirm('Are you sure you want to close this poll?')) {
                fetch(`/chat/poll/${pollId}/close`, {
                    method: 'POST',
                    headers: {
                        'X-CSRF-TOKEN': '{{ csrf_token('close_poll_token') }}'
                    }
                })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        return response.json().then(data => {
                            throw new Error(data.error || 'Error closing poll');
                        });
                    }
                })
                .then(data => {
                    console.log('Poll closed successfully', data);
                    loadChatContent(currentChatId);
                })
                .catch(error => {
                    console.error('Error closing poll:', error);
                    alert('Error closing poll: ' + error.message);
                });
            }
        }

        // Add poll option
        function addOption() {
            const container = document.getElementById('pollOptions');
            const optionCount = container.children.length + 1;
            const div = document.createElement('div');
            div.className = 'mb-2 option-input-group';
            div.innerHTML = `
                <div class="flex-grow-1">
                    <label class="form-label">Option ${optionCount}</label>
                    <input type="text" class="form-control" name="options[]" required>
                </div>
                <div class="remove-option-btn" onclick="removeOption(this)">
                    <i class="fas fa-times-circle"></i>
                </div>
            `;
            container.appendChild(div);
        }

        // Remove poll option
        function removeOption(button) {
            const container = document.getElementById('pollOptions');
            if (container.children.length <= 2) {
                alert('A poll requires at least 2 options.');
                return;
            }
            
            const optionGroup = button.parentElement;
            container.removeChild(optionGroup);
            
            // Update option labels
            const options = container.querySelectorAll('.option-input-group');
            options.forEach((option, index) => {
                const label = option.querySelector('.form-label');
                label.textContent = `Option ${index + 1}`;
            });
        }

        // Add remove buttons to existing options (except the first two)
        document.addEventListener('DOMContentLoaded', function() {
            const options = document.querySelectorAll('#pollOptions .option-input-group');
            options.forEach((option, index) => {
                if (index >= 2) { // First two options are required
                    const removeBtn = document.createElement('div');
                    removeBtn.className = 'remove-option-btn';
                    removeBtn.innerHTML = '<i class="fas fa-times-circle"></i>';
                    removeBtn.onclick = function() { removeOption(this); };
                    option.appendChild(removeBtn);
                }
            });
        });
    </script>
{% endblock %} 